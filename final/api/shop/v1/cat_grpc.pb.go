// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatClient is the client API for Cat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatClient interface {
	CreateCat(ctx context.Context, in *CreateCatRequest, opts ...grpc.CallOption) (*CreateCatReply, error)
	UpdateCat(ctx context.Context, in *UpdateCatRequest, opts ...grpc.CallOption) (*UpdateCatReply, error)
	DeleteCat(ctx context.Context, in *DeleteCatRequest, opts ...grpc.CallOption) (*DeleteCatReply, error)
	GetCat(ctx context.Context, in *GetCatRequest, opts ...grpc.CallOption) (*GetCatReply, error)
	ListCat(ctx context.Context, in *ListCatRequest, opts ...grpc.CallOption) (*ListCatReply, error)
}

type catClient struct {
	cc grpc.ClientConnInterface
}

func NewCatClient(cc grpc.ClientConnInterface) CatClient {
	return &catClient{cc}
}

func (c *catClient) CreateCat(ctx context.Context, in *CreateCatRequest, opts ...grpc.CallOption) (*CreateCatReply, error) {
	out := new(CreateCatReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Cat/CreateCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) UpdateCat(ctx context.Context, in *UpdateCatRequest, opts ...grpc.CallOption) (*UpdateCatReply, error) {
	out := new(UpdateCatReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Cat/UpdateCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) DeleteCat(ctx context.Context, in *DeleteCatRequest, opts ...grpc.CallOption) (*DeleteCatReply, error) {
	out := new(DeleteCatReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Cat/DeleteCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) GetCat(ctx context.Context, in *GetCatRequest, opts ...grpc.CallOption) (*GetCatReply, error) {
	out := new(GetCatReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Cat/GetCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) ListCat(ctx context.Context, in *ListCatRequest, opts ...grpc.CallOption) (*ListCatReply, error) {
	out := new(ListCatReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Cat/ListCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatServer is the server API for Cat service.
// All implementations must embed UnimplementedCatServer
// for forward compatibility
type CatServer interface {
	CreateCat(context.Context, *CreateCatRequest) (*CreateCatReply, error)
	UpdateCat(context.Context, *UpdateCatRequest) (*UpdateCatReply, error)
	DeleteCat(context.Context, *DeleteCatRequest) (*DeleteCatReply, error)
	GetCat(context.Context, *GetCatRequest) (*GetCatReply, error)
	ListCat(context.Context, *ListCatRequest) (*ListCatReply, error)
	mustEmbedUnimplementedCatServer()
}

// UnimplementedCatServer must be embedded to have forward compatible implementations.
type UnimplementedCatServer struct {
}

func (UnimplementedCatServer) CreateCat(context.Context, *CreateCatRequest) (*CreateCatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCat not implemented")
}
func (UnimplementedCatServer) UpdateCat(context.Context, *UpdateCatRequest) (*UpdateCatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCat not implemented")
}
func (UnimplementedCatServer) DeleteCat(context.Context, *DeleteCatRequest) (*DeleteCatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCat not implemented")
}
func (UnimplementedCatServer) GetCat(context.Context, *GetCatRequest) (*GetCatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCat not implemented")
}
func (UnimplementedCatServer) ListCat(context.Context, *ListCatRequest) (*ListCatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCat not implemented")
}
func (UnimplementedCatServer) mustEmbedUnimplementedCatServer() {}

// UnsafeCatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatServer will
// result in compilation errors.
type UnsafeCatServer interface {
	mustEmbedUnimplementedCatServer()
}

func RegisterCatServer(s grpc.ServiceRegistrar, srv CatServer) {
	s.RegisterService(&Cat_ServiceDesc, srv)
}

func _Cat_CreateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).CreateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Cat/CreateCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).CreateCat(ctx, req.(*CreateCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_UpdateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).UpdateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Cat/UpdateCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).UpdateCat(ctx, req.(*UpdateCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_DeleteCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).DeleteCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Cat/DeleteCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).DeleteCat(ctx, req.(*DeleteCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_GetCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).GetCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Cat/GetCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).GetCat(ctx, req.(*GetCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_ListCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).ListCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Cat/ListCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).ListCat(ctx, req.(*ListCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cat_ServiceDesc is the grpc.ServiceDesc for Cat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shop.v1.Cat",
	HandlerType: (*CatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCat",
			Handler:    _Cat_CreateCat_Handler,
		},
		{
			MethodName: "UpdateCat",
			Handler:    _Cat_UpdateCat_Handler,
		},
		{
			MethodName: "DeleteCat",
			Handler:    _Cat_DeleteCat_Handler,
		},
		{
			MethodName: "GetCat",
			Handler:    _Cat_GetCat_Handler,
		},
		{
			MethodName: "ListCat",
			Handler:    _Cat_ListCat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shop/v1/cat.proto",
}
