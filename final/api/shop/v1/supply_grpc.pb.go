// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SupplyClient is the client API for Supply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupplyClient interface {
	CreateSupply(ctx context.Context, in *CreateSupplyRequest, opts ...grpc.CallOption) (*CreateSupplyReply, error)
	UpdateSupply(ctx context.Context, in *UpdateSupplyRequest, opts ...grpc.CallOption) (*UpdateSupplyReply, error)
	DeleteSupply(ctx context.Context, in *DeleteSupplyRequest, opts ...grpc.CallOption) (*DeleteSupplyReply, error)
	GetSupply(ctx context.Context, in *GetSupplyRequest, opts ...grpc.CallOption) (*GetSupplyReply, error)
	ListSupply(ctx context.Context, in *ListSupplyRequest, opts ...grpc.CallOption) (*ListSupplyReply, error)
}

type supplyClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplyClient(cc grpc.ClientConnInterface) SupplyClient {
	return &supplyClient{cc}
}

func (c *supplyClient) CreateSupply(ctx context.Context, in *CreateSupplyRequest, opts ...grpc.CallOption) (*CreateSupplyReply, error) {
	out := new(CreateSupplyReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Supply/CreateSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyClient) UpdateSupply(ctx context.Context, in *UpdateSupplyRequest, opts ...grpc.CallOption) (*UpdateSupplyReply, error) {
	out := new(UpdateSupplyReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Supply/UpdateSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyClient) DeleteSupply(ctx context.Context, in *DeleteSupplyRequest, opts ...grpc.CallOption) (*DeleteSupplyReply, error) {
	out := new(DeleteSupplyReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Supply/DeleteSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyClient) GetSupply(ctx context.Context, in *GetSupplyRequest, opts ...grpc.CallOption) (*GetSupplyReply, error) {
	out := new(GetSupplyReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Supply/GetSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyClient) ListSupply(ctx context.Context, in *ListSupplyRequest, opts ...grpc.CallOption) (*ListSupplyReply, error) {
	out := new(ListSupplyReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.Supply/ListSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplyServer is the server API for Supply service.
// All implementations must embed UnimplementedSupplyServer
// for forward compatibility
type SupplyServer interface {
	CreateSupply(context.Context, *CreateSupplyRequest) (*CreateSupplyReply, error)
	UpdateSupply(context.Context, *UpdateSupplyRequest) (*UpdateSupplyReply, error)
	DeleteSupply(context.Context, *DeleteSupplyRequest) (*DeleteSupplyReply, error)
	GetSupply(context.Context, *GetSupplyRequest) (*GetSupplyReply, error)
	ListSupply(context.Context, *ListSupplyRequest) (*ListSupplyReply, error)
	mustEmbedUnimplementedSupplyServer()
}

// UnimplementedSupplyServer must be embedded to have forward compatible implementations.
type UnimplementedSupplyServer struct {
}

func (UnimplementedSupplyServer) CreateSupply(context.Context, *CreateSupplyRequest) (*CreateSupplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupply not implemented")
}
func (UnimplementedSupplyServer) UpdateSupply(context.Context, *UpdateSupplyRequest) (*UpdateSupplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupply not implemented")
}
func (UnimplementedSupplyServer) DeleteSupply(context.Context, *DeleteSupplyRequest) (*DeleteSupplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupply not implemented")
}
func (UnimplementedSupplyServer) GetSupply(context.Context, *GetSupplyRequest) (*GetSupplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupply not implemented")
}
func (UnimplementedSupplyServer) ListSupply(context.Context, *ListSupplyRequest) (*ListSupplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupply not implemented")
}
func (UnimplementedSupplyServer) mustEmbedUnimplementedSupplyServer() {}

// UnsafeSupplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplyServer will
// result in compilation errors.
type UnsafeSupplyServer interface {
	mustEmbedUnimplementedSupplyServer()
}

func RegisterSupplyServer(s grpc.ServiceRegistrar, srv SupplyServer) {
	s.RegisterService(&Supply_ServiceDesc, srv)
}

func _Supply_CreateSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServer).CreateSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Supply/CreateSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServer).CreateSupply(ctx, req.(*CreateSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supply_UpdateSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServer).UpdateSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Supply/UpdateSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServer).UpdateSupply(ctx, req.(*UpdateSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supply_DeleteSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServer).DeleteSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Supply/DeleteSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServer).DeleteSupply(ctx, req.(*DeleteSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supply_GetSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServer).GetSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Supply/GetSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServer).GetSupply(ctx, req.(*GetSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supply_ListSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyServer).ListSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.Supply/ListSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyServer).ListSupply(ctx, req.(*ListSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Supply_ServiceDesc is the grpc.ServiceDesc for Supply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Supply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shop.v1.Supply",
	HandlerType: (*SupplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupply",
			Handler:    _Supply_CreateSupply_Handler,
		},
		{
			MethodName: "UpdateSupply",
			Handler:    _Supply_UpdateSupply_Handler,
		},
		{
			MethodName: "DeleteSupply",
			Handler:    _Supply_DeleteSupply_Handler,
		},
		{
			MethodName: "GetSupply",
			Handler:    _Supply_GetSupply_Handler,
		},
		{
			MethodName: "ListSupply",
			Handler:    _Supply_ListSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shop/v1/supply.proto",
}
