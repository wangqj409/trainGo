// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CatHTTPServer interface {
	CreateCat(context.Context, *CreateCatRequest) (*CreateCatReply, error)
	DeleteCat(context.Context, *DeleteCatRequest) (*DeleteCatReply, error)
	GetCat(context.Context, *GetCatRequest) (*GetCatReply, error)
	ListCat(context.Context, *ListCatRequest) (*ListCatReply, error)
	UpdateCat(context.Context, *UpdateCatRequest) (*UpdateCatReply, error)
}

func RegisterCatHTTPServer(s *http.Server, srv CatHTTPServer) {
	r := s.Route("/")
	r.POST("/cat", _Cat_CreateCat0_HTTP_Handler(srv))
	r.POST("/cat", _Cat_UpdateCat0_HTTP_Handler(srv))
	r.POST("/cat/{cat_id}", _Cat_DeleteCat0_HTTP_Handler(srv))
	r.GET("/cat/{cat_id}", _Cat_GetCat0_HTTP_Handler(srv))
	r.GET("/cats", _Cat_ListCat0_HTTP_Handler(srv))
}

func _Cat_CreateCat0_HTTP_Handler(srv CatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.v1.Cat/CreateCat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCat(ctx, req.(*CreateCatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCatReply)
		return ctx.Result(200, reply)
	}
}

func _Cat_UpdateCat0_HTTP_Handler(srv CatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.v1.Cat/UpdateCat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCat(ctx, req.(*UpdateCatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCatReply)
		return ctx.Result(200, reply)
	}
}

func _Cat_DeleteCat0_HTTP_Handler(srv CatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.v1.Cat/DeleteCat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCat(ctx, req.(*DeleteCatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCatReply)
		return ctx.Result(200, reply)
	}
}

func _Cat_GetCat0_HTTP_Handler(srv CatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.v1.Cat/GetCat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCat(ctx, req.(*GetCatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCatReply)
		return ctx.Result(200, reply)
	}
}

func _Cat_ListCat0_HTTP_Handler(srv CatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.v1.Cat/ListCat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCat(ctx, req.(*ListCatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCatReply)
		return ctx.Result(200, reply)
	}
}

type CatHTTPClient interface {
	CreateCat(ctx context.Context, req *CreateCatRequest, opts ...http.CallOption) (rsp *CreateCatReply, err error)
	DeleteCat(ctx context.Context, req *DeleteCatRequest, opts ...http.CallOption) (rsp *DeleteCatReply, err error)
	GetCat(ctx context.Context, req *GetCatRequest, opts ...http.CallOption) (rsp *GetCatReply, err error)
	ListCat(ctx context.Context, req *ListCatRequest, opts ...http.CallOption) (rsp *ListCatReply, err error)
	UpdateCat(ctx context.Context, req *UpdateCatRequest, opts ...http.CallOption) (rsp *UpdateCatReply, err error)
}

type CatHTTPClientImpl struct {
	cc *http.Client
}

func NewCatHTTPClient(client *http.Client) CatHTTPClient {
	return &CatHTTPClientImpl{client}
}

func (c *CatHTTPClientImpl) CreateCat(ctx context.Context, in *CreateCatRequest, opts ...http.CallOption) (*CreateCatReply, error) {
	var out CreateCatReply
	pattern := "/cat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.v1.Cat/CreateCat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CatHTTPClientImpl) DeleteCat(ctx context.Context, in *DeleteCatRequest, opts ...http.CallOption) (*DeleteCatReply, error) {
	var out DeleteCatReply
	pattern := "/cat/{cat_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.v1.Cat/DeleteCat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CatHTTPClientImpl) GetCat(ctx context.Context, in *GetCatRequest, opts ...http.CallOption) (*GetCatReply, error) {
	var out GetCatReply
	pattern := "/cat/{cat_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.v1.Cat/GetCat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CatHTTPClientImpl) ListCat(ctx context.Context, in *ListCatRequest, opts ...http.CallOption) (*ListCatReply, error) {
	var out ListCatReply
	pattern := "/cats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.v1.Cat/ListCat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CatHTTPClientImpl) UpdateCat(ctx context.Context, in *UpdateCatRequest, opts ...http.CallOption) (*UpdateCatReply, error) {
	var out UpdateCatReply
	pattern := "/cat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.v1.Cat/UpdateCat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
