// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/shop/v1/cat.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CatInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CatInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CatId

	// no validation rules for CatName

	// no validation rules for Pid

	return nil
}

// CatInfoValidationError is the validation error returned by CatInfo.Validate
// if the designated constraints aren't met.
type CatInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatInfoValidationError) ErrorName() string { return "CatInfoValidationError" }

// Error satisfies the builtin error interface
func (e CatInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatInfoValidationError{}

// Validate checks the field values on CreateCatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateCatRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CatName

	// no validation rules for Pid

	return nil
}

// CreateCatRequestValidationError is the validation error returned by
// CreateCatRequest.Validate if the designated constraints aren't met.
type CreateCatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCatRequestValidationError) ErrorName() string { return "CreateCatRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateCatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCatRequestValidationError{}

// Validate checks the field values on CreateCatReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateCatReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCatReplyValidationError{
				field:  "Cat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCatReplyValidationError is the validation error returned by
// CreateCatReply.Validate if the designated constraints aren't met.
type CreateCatReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCatReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCatReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCatReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCatReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCatReplyValidationError) ErrorName() string { return "CreateCatReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateCatReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCatReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCatReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCatReplyValidationError{}

// Validate checks the field values on UpdateCatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateCatRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCatRequestValidationError{
				field:  "Cat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCatRequestValidationError is the validation error returned by
// UpdateCatRequest.Validate if the designated constraints aren't met.
type UpdateCatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCatRequestValidationError) ErrorName() string { return "UpdateCatRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCatRequestValidationError{}

// Validate checks the field values on UpdateCatReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateCatReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCatReplyValidationError{
				field:  "Cat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCatReplyValidationError is the validation error returned by
// UpdateCatReply.Validate if the designated constraints aren't met.
type UpdateCatReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCatReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCatReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCatReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCatReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCatReplyValidationError) ErrorName() string { return "UpdateCatReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCatReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCatReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCatReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCatReplyValidationError{}

// Validate checks the field values on DeleteCatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteCatRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CatId

	return nil
}

// DeleteCatRequestValidationError is the validation error returned by
// DeleteCatRequest.Validate if the designated constraints aren't met.
type DeleteCatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCatRequestValidationError) ErrorName() string { return "DeleteCatRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCatRequestValidationError{}

// Validate checks the field values on DeleteCatReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteCatReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// DeleteCatReplyValidationError is the validation error returned by
// DeleteCatReply.Validate if the designated constraints aren't met.
type DeleteCatReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCatReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCatReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCatReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCatReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCatReplyValidationError) ErrorName() string { return "DeleteCatReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCatReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCatReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCatReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCatReplyValidationError{}

// Validate checks the field values on GetCatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetCatRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CatId

	return nil
}

// GetCatRequestValidationError is the validation error returned by
// GetCatRequest.Validate if the designated constraints aren't met.
type GetCatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCatRequestValidationError) ErrorName() string { return "GetCatRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCatRequestValidationError{}

// Validate checks the field values on GetCatReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetCatReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCatReplyValidationError{
				field:  "Cat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCatReplyValidationError is the validation error returned by
// GetCatReply.Validate if the designated constraints aren't met.
type GetCatReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCatReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCatReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCatReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCatReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCatReplyValidationError) ErrorName() string { return "GetCatReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCatReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCatReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCatReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCatReplyValidationError{}

// Validate checks the field values on ListCatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListCatRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListCatRequestValidationError is the validation error returned by
// ListCatRequest.Validate if the designated constraints aren't met.
type ListCatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatRequestValidationError) ErrorName() string { return "ListCatRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListCatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatRequestValidationError{}

// Validate checks the field values on ListCatReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListCatReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCatReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCatReplyValidationError is the validation error returned by
// ListCatReply.Validate if the designated constraints aren't met.
type ListCatReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatReplyValidationError) ErrorName() string { return "ListCatReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCatReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatReplyValidationError{}
