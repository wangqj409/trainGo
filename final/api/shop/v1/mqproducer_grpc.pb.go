// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MqProducerClient is the client API for MqProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqProducerClient interface {
	CreateMqproducer(ctx context.Context, in *CreateMqproducerRequest, opts ...grpc.CallOption) (*CreateMqproducerReply, error)
	UpdateMqproducer(ctx context.Context, in *UpdateMqproducerRequest, opts ...grpc.CallOption) (*UpdateMqproducerReply, error)
	DeleteMqproducer(ctx context.Context, in *DeleteMqproducerRequest, opts ...grpc.CallOption) (*DeleteMqproducerReply, error)
	GetMqproducer(ctx context.Context, in *GetMqproducerRequest, opts ...grpc.CallOption) (*GetMqproducerReply, error)
	ListMqproducer(ctx context.Context, in *ListMqproducerRequest, opts ...grpc.CallOption) (*ListMqproducerReply, error)
}

type mqProducerClient struct {
	cc grpc.ClientConnInterface
}

func NewMqProducerClient(cc grpc.ClientConnInterface) MqProducerClient {
	return &mqProducerClient{cc}
}

func (c *mqProducerClient) CreateMqproducer(ctx context.Context, in *CreateMqproducerRequest, opts ...grpc.CallOption) (*CreateMqproducerReply, error) {
	out := new(CreateMqproducerReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.MqProducer/CreateMqproducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqProducerClient) UpdateMqproducer(ctx context.Context, in *UpdateMqproducerRequest, opts ...grpc.CallOption) (*UpdateMqproducerReply, error) {
	out := new(UpdateMqproducerReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.MqProducer/UpdateMqproducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqProducerClient) DeleteMqproducer(ctx context.Context, in *DeleteMqproducerRequest, opts ...grpc.CallOption) (*DeleteMqproducerReply, error) {
	out := new(DeleteMqproducerReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.MqProducer/DeleteMqproducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqProducerClient) GetMqproducer(ctx context.Context, in *GetMqproducerRequest, opts ...grpc.CallOption) (*GetMqproducerReply, error) {
	out := new(GetMqproducerReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.MqProducer/GetMqproducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqProducerClient) ListMqproducer(ctx context.Context, in *ListMqproducerRequest, opts ...grpc.CallOption) (*ListMqproducerReply, error) {
	out := new(ListMqproducerReply)
	err := c.cc.Invoke(ctx, "/api.shop.v1.MqProducer/ListMqproducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqProducerServer is the server API for MqProducer service.
// All implementations must embed UnimplementedMqProducerServer
// for forward compatibility
type MqProducerServer interface {
	CreateMqproducer(context.Context, *CreateMqproducerRequest) (*CreateMqproducerReply, error)
	UpdateMqproducer(context.Context, *UpdateMqproducerRequest) (*UpdateMqproducerReply, error)
	DeleteMqproducer(context.Context, *DeleteMqproducerRequest) (*DeleteMqproducerReply, error)
	GetMqproducer(context.Context, *GetMqproducerRequest) (*GetMqproducerReply, error)
	ListMqproducer(context.Context, *ListMqproducerRequest) (*ListMqproducerReply, error)
	mustEmbedUnimplementedMqProducerServer()
}

// UnimplementedMqProducerServer must be embedded to have forward compatible implementations.
type UnimplementedMqProducerServer struct {
}

func (UnimplementedMqProducerServer) CreateMqproducer(context.Context, *CreateMqproducerRequest) (*CreateMqproducerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMqproducer not implemented")
}
func (UnimplementedMqProducerServer) UpdateMqproducer(context.Context, *UpdateMqproducerRequest) (*UpdateMqproducerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMqproducer not implemented")
}
func (UnimplementedMqProducerServer) DeleteMqproducer(context.Context, *DeleteMqproducerRequest) (*DeleteMqproducerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMqproducer not implemented")
}
func (UnimplementedMqProducerServer) GetMqproducer(context.Context, *GetMqproducerRequest) (*GetMqproducerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMqproducer not implemented")
}
func (UnimplementedMqProducerServer) ListMqproducer(context.Context, *ListMqproducerRequest) (*ListMqproducerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMqproducer not implemented")
}
func (UnimplementedMqProducerServer) mustEmbedUnimplementedMqProducerServer() {}

// UnsafeMqProducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqProducerServer will
// result in compilation errors.
type UnsafeMqProducerServer interface {
	mustEmbedUnimplementedMqProducerServer()
}

func RegisterMqProducerServer(s grpc.ServiceRegistrar, srv MqProducerServer) {
	s.RegisterService(&MqProducer_ServiceDesc, srv)
}

func _MqProducer_CreateMqproducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMqproducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqProducerServer).CreateMqproducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.MqProducer/CreateMqproducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqProducerServer).CreateMqproducer(ctx, req.(*CreateMqproducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqProducer_UpdateMqproducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMqproducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqProducerServer).UpdateMqproducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.MqProducer/UpdateMqproducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqProducerServer).UpdateMqproducer(ctx, req.(*UpdateMqproducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqProducer_DeleteMqproducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMqproducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqProducerServer).DeleteMqproducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.MqProducer/DeleteMqproducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqProducerServer).DeleteMqproducer(ctx, req.(*DeleteMqproducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqProducer_GetMqproducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMqproducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqProducerServer).GetMqproducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.MqProducer/GetMqproducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqProducerServer).GetMqproducer(ctx, req.(*GetMqproducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqProducer_ListMqproducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMqproducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqProducerServer).ListMqproducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.v1.MqProducer/ListMqproducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqProducerServer).ListMqproducer(ctx, req.(*ListMqproducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MqProducer_ServiceDesc is the grpc.ServiceDesc for MqProducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqProducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shop.v1.MqProducer",
	HandlerType: (*MqProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMqproducer",
			Handler:    _MqProducer_CreateMqproducer_Handler,
		},
		{
			MethodName: "UpdateMqproducer",
			Handler:    _MqProducer_UpdateMqproducer_Handler,
		},
		{
			MethodName: "DeleteMqproducer",
			Handler:    _MqProducer_DeleteMqproducer_Handler,
		},
		{
			MethodName: "GetMqproducer",
			Handler:    _MqProducer_GetMqproducer_Handler,
		},
		{
			MethodName: "ListMqproducer",
			Handler:    _MqProducer_ListMqproducer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shop/v1/mqproducer.proto",
}
